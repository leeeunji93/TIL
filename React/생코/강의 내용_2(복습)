#### component 속성 표현
 
```javascript
// 기본
class Subject extends Component{
render()
return(
<header>
<h1>web</h1>
world!
</header>
);
}
}

class App extends Component{
render()
return(
<div className = "APP">
<Subject></Subject>
<TOC></TOC>
)
}

// App 컴포넌트에서 Sub 부분에 프롭스를 통해 값이 바뀌는 자유도를 높이려면?
//props를 통해서 데이터 변화 가능! 
class Subject extends Component{
render()
return(
<header>
<h1>{this.props.title}</h1>
{this.props.sub}
world
</header>
);
}
}

class App extends Component{
render()
return(
<div className = "APP">
<Subject title = "web" sub = "world!"></Subject>
<TOC></TOC>
)
}
```

#### 문법 
`bind` 
: event가 호출 됐을 때 실행되는 이 함수 안에서는 this 값이 컴퍼넌트 자기 자신을 가리키지 않음. 
<br>고로 this값을 못찾는다고 에러가 뜨면 함수가 끝난 직후에 bind(this) 추가

```javascript
 <h1><a href="/" onClick={function(e) {
                       e.preventDefault();
                       this.setstate({
                           mode: "welcome"
                       });
                    }.bind(this)}>{this.state.subject.title}</a></h1>
                    {this.state.subject.sub}
``` 
`bind` 대신 화살표 함수 사용하면 가능 


`setState`
: 이미 컴포넌트가 생성이 끝난 다음에 동적으로 스테이트 값을 바꿀 때 필요하다.
<br> constructor 내에선 편하게 바꿔도 된다.

### event

else if (this.state.mode === "read") {
            var i = 0;
            while(i < this.state.contents.length){
            var data = this.state.contents[i];
            if (data.id === this.state.selected_content_id) {
                _title = data.title;
                _desc =data.desc;
                break;
            }
            
            filter로 만들어보기
 else if (this.state.mode === "read") {
            var data = [this.state.contents];
            var dataZip = data.filter(function(data){
                if (data.id === this.state.selected_content_id) {
                    _title = data.title;
                    _desc =data.desc;
                }
            });
        }
    }
